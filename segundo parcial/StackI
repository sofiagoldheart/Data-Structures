#include<iostream>
#include<stdio.h>
#include<stdlib.h>

using namespace std;
const int MAX = 3;

struct StackI{
    int *arri;
    int top;
    int sizemax;
};

bool IniStackI(StackI *si, int s);
bool isStackEmpty(StackI si);
bool isStackFull(StackI si);
void ShowStackI(StackI si);
bool PushI(StackI *si, int elem);
int  PopI(StackI *si, bool *vflag);

int main(){
  int opt;
  int s=0;
  bool isOk;
  StackI sti01;
  bool valid;
  int item;
  do {
  cout << "Menu" << endl;
  cout << "1.- Stack initialization" << endl;
  cout << "2.- Push an element" << endl;
  cout << "3.- Pop an element" << endl;
  cout << "4.- Show the status of stack" << endl;
  cout << "5.- Exit" << endl;
  cin >> opt;
    system ("clear");
    switch(opt){
      case 1:  
        cout << "1. Stack initialization" << endl;
        cout << "Entry number" << endl;;
        cin >> s;
        isOk = IniStackI(&sti01, s);
        if(isOk == 0){
          cout << "Error"<<endl;
        }else{
          cout << "Congratulations" <<endl;
        }
      break;
        cout <<  "2.- Push an element" << endl;
                cout <<  "Enter your element: ";
                cin >> elem;

                isOK = PushI(&sti01, elem);

                if(isOK == 0)
                {
                    cout << "ERROR" << endl;
                }
                else
                {
                    cout << "ðŸ˜Ž" << endl;
                }
      case 3:cout << "Option 3"<< endl;
      break;
      case 4:cout << "Option 4"<< endl;
      break;
      case 5:cout << "Goodbye"<< endl;
      break;
      default: cout << "Insert a valid option" << endl;
    }
  }while(opt !=5);
    return 0;
}

bool IniStackI(StackI *si, int s){
    si->arri = new int[s];
    if (si->arri == NULL){
        cout << "Not enough memory"<<endl;
        return false;
    }
    si->top = -1;
    si->sizemax = s;
    return true;
}

bool isStackEmpty(StackI si){
    if (si.top < 0){ return true;}
    return false;
}

bool isStackFull(StackI si){
    if (si.top >= (si.sizemax -1) ){ return true;}
    return false;
}

void ShowStackI(StackI si){
  printf("Address of first element on Stack: %p\n",si.arri);
  cout << "Size of Stack: "<<si.sizemax<<endl;
  cout << "Position of top: "<<si.top<<endl;

}

bool PushI(StackI *si, int elem){
    if (isStackFull(*si)){
        cout <<"Stack Full";
        return false;
    }
    si->arri[++si->top] = elem;
    cout <<"Intro: "<< si->arri[si->top]<<endl;
    return true;
}

int  PopI(StackI *si, bool *vflag){
    int vret = 0;
    if (isStackEmpty(*si)){
       *vflag = false;
    }
    else{
        vret = si->arri[si->top--];
        *vflag = true;
    }
    return vret;
}
